AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

# Setting global properties
Globals:
  # This applies to all AWS::Serverless::Function
  Function:
    Timeout: 30
    Runtime: python3.8
    Handler: app.lambda_handler

Resources:
  InputQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 30
      QueueName: event-processor-queue-main
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 2
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 30
      QueueName: event-processor-queue-dlq

  Processor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: event-processor
      CodeUri: lambdas/processor/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          REGION_NAME: !Ref AWS::Region
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InputQueue.Arn
            BatchSize: 1
            Enabled: true
  Generator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: event-generator
      CodeUri: lambdas/generator/
      Environment:
        Variables:
          TABLE_NAME: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      Events: 
        InvokeGenerator:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /hello
            Method: GET

  Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: greeting
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: event-processor-sqs-api
      DefinitionBody:
        openapi: "3.0.0"
        paths:
          "/":
            post:
              summary: Post a message to the Queue
              responses:
                "200":
                  description: 200 status response
                "400":
                  description: 400 status response
                "500":
                  description: 500 status response
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: AWS
                passthroughBehavior: NEVER
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//"
                credentials: !GetAtt ApiRole.Arn
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json:
                    !Sub "Action=SendMessage##\n&QueueUrl=$util.urlEncode('${InputQueue}')##\n\
                    &MessageBody=$util.urlEncode($input.body)##\n"
                responses:
                  "4\\d{2}":
                    statusCode: 400
                    responseTemplates:
                      application/json: >
                        {
                          "message": $input.json('$.message')
                        }
                  "5\\d{2}":
                    statusCode: 500
                    responseTemplates:
                      application/json: >
                        {
                          "message": $input.json('$.message')
                        }
                  default: # On success - maybe return an ID here for the client to track?
                    statusCode: 200
                    responseTemplates:
                      application/json: >
                        {
                          "message": "Success"
                        }
  # ---- IAM ----
  # Role for API Gateway to assume to post to the SQS queue
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: AnythingGoes
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "*" # Specify only to post messages to the que as action
                  # - dynamodb:PutItem
                Resource:
                  - "*" #Specify the Queue ARN here to minimize attack surface
                  # - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

Outputs:
  PostEndpointApi:
    Description: "API Gateway endpoint URL for Prod stage for Post Endpoint"
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  Processor:
    Description: "1st Lambda Function ARN"
    Value: !GetAtt Processor.Arn
