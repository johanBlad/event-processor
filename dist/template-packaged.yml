AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 30
    Runtime: python3.8
    Handler: app.lambda_handler
Resources:
  InputQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 30
      QueueName: event-processor-queue-main
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - DeadLetterQueue
          - Arn
        maxReceiveCount: 2
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 30
      QueueName: event-processor-queue-dlq
  Processor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: event-processor
      CodeUri: s3://event-processor-sqs/c70f27e0e2f1f9aac8ea246def4c5d91
      Policies:
      - AmazonSQSFullAccess
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Table
          REGION_NAME:
            Ref: AWS::Region
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - InputQueue
              - Arn
            BatchSize: 1
            Enabled: true
  Generator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: event-generator
      CodeUri: s3://event-processor-sqs/df79b2f516f562515beb38151153a6ee
      Environment:
        Variables:
          QUEUE_PROXY_ENDPOINT:
            Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
      Layers:
      - Ref: GeneratorLayer
  GeneratorLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: event-processor-generator
      Description: Dependencies for the blank sample app.
      ContentUri: s3://event-processor-sqs/a3a4c927667118ca8848078baf43574c
      CompatibleRuntimes:
      - python3.8
  Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: eventId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: event-processor-sqs-api
      DefinitionBody:
        openapi: 3.0.0
        paths:
          /:
            post:
              summary: Post a message to the Queue
              responses:
                '200':
                  description: 200 status response
                '400':
                  description: 400 status response
                '500':
                  description: 500 status response
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: AWS
                passthroughBehavior: NEVER
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path//
                credentials:
                  Fn::GetAtt:
                  - ApiRole
                  - Arn
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json:
                    Fn::Sub: "Action=SendMessage##\n&QueueUrl=$util.urlEncode('${InputQueue}')##\n\
                      &MessageBody=$util.urlEncode($input.body)##\n"
                responses:
                  4\d{2}:
                    statusCode: 400
                    responseTemplates:
                      application/json: "{\n  \"message\": $input.json('$.message')\n\
                        }\n"
                  5\d{2}:
                    statusCode: 500
                    responseTemplates:
                      application/json: "{\n  \"message\": $input.json('$.message')\n\
                        }\n"
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: "{\n  \"message\": \"Success\"\n}\n"
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: AnythingGoes
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource:
            - '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
Outputs:
  PostEndpointApi:
    Description: API Gateway endpoint URL for prod stage for Post Endpoint
    Value:
      Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
  Processor:
    Description: 1st Lambda Function ARN
    Value:
      Fn::GetAtt:
      - Processor
      - Arn
